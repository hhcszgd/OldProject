//
//  HGoodsVC.m
//  b2c
//
//  Created by wangyuanfei on 16/4/21.
//  Copyright © 2016年 www.16lao.com. All rights reserved.
//

#import "HGoodsVC.h"
#import "HGoodsTopCell.h"
#import "HGoodsBottomCell.h"
#import "HGTopGoodInfoCell.h"
#import "XMPPJID.h"
#import "HGoodsBaseCell.h"

#import "HSelectSpecView.h"
#import "ShopCarVC.h"
#import "HGSubMenuView.h"
#import "LoginNavVC.h"

#import "HSepcSubModel.h"
#import "HSepcSubTypeDetailModel.h"
#import "EditAddressVC.h"
#import "HGTopSubGoodsCell.h"
#import "HGTopSpecificationCell.h"
@interface HGoodsVC ()<TitleViewDelegate,HGoodsTopDelegae,HGoodsBottomCellDelegate,HSelectSpecViewDelegate,HGMoreViewDelegate,EditAddressVCDelegate>
@property (nonatomic, strong) UICollectionView *col;
@property (nonatomic, strong) UICollectionViewFlowLayout *flowLayout;
/**是否收藏商品*/
@property (nonatomic, assign) BOOL isCollectionGoods;

@property (nonatomic, weak) HGoodsTopCell *topCell;

/**商品id*/
@property (nonatomic, copy) NSString *goods_id;
/**选规格的模型*/
@property (nonatomic, weak) HSelectSpecView *specView;


/**table*/
@property (nonatomic, strong) UITableView *subTableView;
/**卖家用户名*/
@property (nonatomic, copy) NSString *sellerUser;

/**分享图片的URL地址*/
@property (nonatomic, copy) NSString *sharImageUrl;
/**分享店铺的名字*/
@property (nonatomic, copy) NSString *sharShopName;
/**分享商品的名字*/
@property (nonatomic, copy) NSString *sharGoodsName;
/**分享店铺的logo*/
@property (nonatomic, copy) NSString *sharShopLogoURl;
/**商品的状态的状态码*/
@property (nonatomic, assign) NSInteger goodStatus;
/**商品预售时间*/
@property (nonatomic, copy) NSString *shelvesTime;
/**选规格cell所在的indexPath*/
@property (nonatomic, strong) NSIndexPath *specInfoIndexPath;

//加入购物车之前购物车的数量
@property (nonatomic, assign) NSInteger shopCarCount;

@end

@implementation HGoodsVC

- (void)viewDidLoad {
    [super viewDidLoad];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(goodsInfo:) name:@"HGTopSubGoodsCell" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(shopCarChange:) name:SHOPCARDATACHANGED object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(navigationBack) name:@"goodsHaveRemove" object:nil];
    self.goods_id = self.keyParamete[@"paramete"];
    NSLog(@"%@, %d ,%@",[self class],__LINE__,self.goods_id);

    //数据没有加载出来的时候titleview是不能使用的。
    self.titleView.userInteractionEnabled = NO;
    //初始化的时候是不收藏
    self.isCollectionGoods = NO;
    //在子线程中创建数据库
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        [[FMDBManager sharFMDBMabager] createTableWithSqlStr];
    });
    self.naviTitle = nil;
    [self addCol];
    
    self.automaticallyAdjustsScrollViewInsets = NO;
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(showBottomCell:) name:@"showBottomCell" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(showTopCell:) name:@"showTopCell" object:nil];
    // Do any additional setup after loading the view.
}
#pragma mark -- 从购物车返回
- (void)shopCarChange:(NSNotification *)notification{
    [[UserInfo shareUserInfo] gotShopCarNumberSuccess:^(ResponseObject *responseObject) {
        NSLog(@"%@, %d ,%@",[self class],__LINE__,responseObject.data);
        NSInteger shopCarNumber = [responseObject.data integerValue];
        if (self.shopCarCount != shopCarNumber) {
            [self editShopCarNumber:shopCarNumber];
        }
        

    } failure:^(NSError *error) {
        
    }];
}


#pragma mark -- 讲商品页面的值传到控制器
- (void)goodsInfo:(NSNotification *)goodsInfo{
    NSDictionary *info = goodsInfo.userInfo;
    self.sellerUser = info[@"sellerUser"];
    self.sharImageUrl = info[@"sharImageUrl"];
    self.sharShopName = info[@"sharShopName"];
    self.sharGoodsName = info[@"sharGoodsName"];
    self.sharShopLogoURl = info[@"sharShopLogoURl"];
    self.goodStatus = [info[@"goodStatus"] integerValue];
    self.shelvesTime = info[@"shelvesTime"];
    self.sepecificationModel = info[@"sepecificationModel"];
    self.titleView.userInteractionEnabled = YES;
    NSString *shopCarNumber = info[@"shopCarNumber"];
    [self editShopCarNumber:[shopCarNumber integerValue]];
   [self judgeGoodsStatusDecideIsBuy];
}





#pragma mark -- 书写购物车个数
- (void)editShopCarNumber:(NSInteger)number{
    self.shopCarCount = number;
    NSLog(@"%@, %d ,%ld",[self class],__LINE__,self.shopCarCount);
    if (number == 0) {
        self.shopCarBtn.numLabel.backgroundColor = [UIColor clearColor];
        self.shopCarBtn.numLabel.text = @"";
    }else if(number > 0 && number < 10){
        self.shopCarBtn.numLabel.backgroundColor = THEMECOLOR;
        self.shopCarBtn.numLabel.textColor = [UIColor whiteColor];
        self.shopCarBtn.numLabel.text = [NSString stringWithFormat:@"%ld",number];
    }else{
        self.shopCarBtn.numLabel.backgroundColor = THEMECOLOR;
        self.shopCarBtn.numLabel.text = @"9+";
        self.shopCarBtn.numLabel.textColor = [UIColor whiteColor];
    }
}

- (void)collectionView:(UICollectionView *)collectionView didEndDisplayingCell:(UICollectionViewCell *)cell forItemAtIndexPath:(NSIndexPath *)indexPath{
    
}
/**设置选规格cell的数据*/
- (void)editsepecificationModel{
    //判断是否全部选中
    [self appendingAllSelectSelectStrWith:@""];
    
}

/**拼接全部选中的规格*/


- (void)appendingAllSelectSelectStrWith:(NSString *)spec {
    for (NSInteger i = 0; i < self.selectIndexPaths.count; i++) {
        NSString *specRank = @"";
        switch (i) {
            case 0:
            {
                specRank = self.goodsDetailModel.spec1;
            }
                break;
            case 1:
            {
                specRank = self.goodsDetailModel.spec2;
            }
                break;
            case 2:
            {
                specRank = self.goodsDetailModel.spec3;
            }
                break;
            case 3:
            {
                specRank = self.goodsDetailModel.spec4;
            }
                break;
            case 4:
            {
                specRank = self.goodsDetailModel.spec5;
            }
                break;
                
                
            default:
                break;
        }
        //如何selectSql是空的那么说明前面不需要加and
       
        spec = [spec stringByAppendingFormat:@"%@  ",specRank];
            
        
    }
    self.sepecificationModel.info = @"请选择";
    self.sepecificationModel.myspec = spec;
    self.sepecificationModel.num = [self.goodsDetailModel.reserced stringByAppendingString:@"件"];
}

- (void)presentSpecViewWithButton:(UIButton *)button{
    __weak typeof(self) Myself = self;
    HSelectSpecView *selectCategary = [[HSelectSpecView alloc] initWithFrame:CGRectMake(0, screenH, screenW, screenH) typeofView:haveTwobtn];
    self.specView = selectCategary;
    //在数据库中插入数据
    selectCategary.delegate = self;
    selectCategary.fatherVC = Myself;
    selectCategary.block =^(){
        [Myself editsepecificationModel];
        HGoodsTopCell *goodsTopCell = (HGoodsTopCell *)[Myself.col cellForItemAtIndexPath:[NSIndexPath indexPathForItem:0 inSection:0]];
        UICollectionView *goodsTopCellCol = goodsTopCell.col;
        HGTopSubGoodsCell *topSubGoodsCell = (HGTopSubGoodsCell*)[goodsTopCellCol cellForItemAtIndexPath:[NSIndexPath indexPathForItem:0 inSection:0]];
        UITableView *table = topSubGoodsCell.table;
        if (self.specInfoIndexPath.length > 0) {
            HGTopSpecificationCell *topSpecificationCell = [table cellForRowAtIndexPath:self.specInfoIndexPath];
            topSpecificationCell.specificationModel = self.sepecificationModel;

        }
        [Myself openBtn];
        Myself.specView = nil;
    };
    /**有规格*/
    if ([self.sepecificationModel.ishavespec isEqualToString:@"1"]) {
        //要弹出spec时候讲按钮关闭
        [self closeBtn];
        //
//        [self gotAddressSuccess:^{
        
            [[UserInfo shareUserInfo] gotGoodsSpecWithgoods_id:self.goods_id succes:^(ResponseObject *responseObject) {
                NSLog(@"%@, %d ,%@",[self class],__LINE__,responseObject.data);
                
                HSepcModel *spec = [HSepcModel mj_objectWithKeyValues:responseObject.data];
                self.sepcModel = spec;
                
                dispatch_async(dispatch_get_global_queue(0, 0), ^{
                    
                    [[FMDBManager sharFMDBMabager] insertData:spec.goodsDeatil];
                    dispatch_async(dispatch_get_main_queue(), ^{
                        selectCategary.selectIndexPaths = self.selectIndexPaths;
                        selectCategary.goodsDetailModel = self.goodsDetailModel;
                        selectCategary.sepcModel = spec;
                    });
                });
                [self.view addSubview:selectCategary];
                UIView *view = [selectCategary viewWithTag:100];
                UIButton *button = (UIButton *)[view viewWithTag:1000];
                [UIView animateWithDuration:0.5 animations:^{
                    selectCategary.frame = CGRectMake(0, 0, screenW, screenH);
                } completion:^(BOOL finished) {
                    [UIView beginAnimations:nil context:nil];
                    [UIView setAnimationDuration:0.1];
                    button.backgroundColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:0.3];
                    [UIView commitAnimations];
                    
                    
                }];
            } failure:^(NSError *error) {
                
                
            }];
//        } failure:^{
//            
//        }];
        
    }else{
        NSLog(@"%@, %d ,%@",[self class],__LINE__,self.goods_id);

        //没有规格
        [[UserInfo shareUserInfo] gotGoodsSpecWithgoods_id:self.goods_id succes:^(ResponseObject *responseObject) {
            NSLog(@"%@, %d ,%@",[self class],__LINE__,responseObject.data);

            HSepcModel *spec = [HSepcModel mj_objectWithKeyValues:responseObject.data];
            HSpecSubGoodsDeatilModel *specGoodsDeatilModel = [spec.goodsDeatil lastObject];
            self.goodsDetailModel = specGoodsDeatilModel;
            //当商品没有库存的时候是不能加入购物车的。
            if ([specGoodsDeatilModel.reserced isEqualToString:@"0"]) {
                AlertInVC(@"卖家没有库存")
                return ;
            }else{
                if (button == self.addSHopCar) {
                    [[UserInfo shareUserInfo] addShopingCarWithGoods_id:self.goods_id goodsNum:1 sub_id:[self.goodsDetailModel.sub_id integerValue] now:@"0" Success:^(ResponseObject *response) {
                        NSLog(@"%@, %d ,%d",[self class],__LINE__,response.status);

                        if (response.status  < 0) {
                            AlertInVC(response.msg)
                            [self openBtn];
                        }else{
                            AlertInVC(@"添加购物车成功")
                        }
                        
                    } failure:^(NSError *error) {
                        
                    }];
                }
                
                
                if (button == self.quickBuy) {
                    [self closeBtn];
                    [[UserInfo shareUserInfo] addShopingCarWithGoods_id:self.goods_id goodsNum:1 sub_id:[self.goodsDetailModel.sub_id integerValue] now:@"1" Success:^(ResponseObject *response) {
                        if (response.status < 0) {
                            AlertInVC(response.msg)
                            [self openBtn];
                        }else{
                            if (self.goodsDetailModel.sub_id == nil) {
                                self.goodsDetailModel.sub_id = @"0";
                            }
                            [self gotAddressSuccess:^{
                                [self openBtn];
                                //添加购物车成功之后
                                SVCGoods *vcGoods = [[SVCGoods alloc] init];
                                
                                vcGoods.ID = response.data[@"cart_id"];
                                
                                vcGoods.number = [self.goodsDetailModel.reserced integerValue];
                                vcGoods.price = [self.goodsDetailModel.price integerValue];
                                vcGoods.shop_id = [self.sepcModel.shop_id integerValue];
                                ConfirmOrderVC *confirmOrder = [[ConfirmOrderVC alloc] init];
                                NSMutableArray *arr = [NSMutableArray array];
                                [arr addObject:vcGoods];
                                confirmOrder.goodsIDs = arr;
                                [self.navigationController pushViewController:confirmOrder animated:YES];
                                
                            } failure:^{
                                AlertInVC(@"未知错误");
                            }];

                        }
                        
                    } failure:^(NSError *error) {
                        
                    }];
                    //多次点击的时候
                    
                    
                    
                }
                
                
                
            }

            
        } failure:^(NSError *error) {
            
        }];
    }
    
    
}
/**关闭加入购物车和立即购买按钮*/
- (void)closeBtn{
    self.addSHopCar.enabled = NO;
    self.quickBuy.enabled = NO;
}
/**打开加入购物车和立即关闭按钮*/
- (void)openBtn{
    self.addSHopCar.enabled = YES;
    self.quickBuy.enabled = YES;
}
#pragma mark -- 加入购物车
- (void)addGoodsToShopCar{
    
    BOOL islogin =[UserInfo shareUserInfo].isLogin;
    if ([self judgeGoodsStatusDecideIsBuy]) {
        if (islogin) {
            //弹出选规格页面
            [self presentSpecViewWithButton:self.addSHopCar];
            
        }else{
            LoginNavVC *login = [[LoginNavVC alloc] initLoginNavVC];
            [[KeyVC shareKeyVC] presentViewController:login animated:YES completion:nil];
        }
    }
   
    
    
    
    
}
#pragma mark --  在购买的时候判断商品的状态。
- (BOOL)judgeGoodsStatusDecideIsBuy{
    if (self.goodStatus > 0) {
        switch (self.goodStatus) {
            case 206:
            {
                self.shelvesLabel.frame = CGRectMake(0, screenH - bottomBtnHeight, screenW, bottomBtnHeight);
                self.shelvesLabel.text = [NSString stringWithFormat:@"预售时间：%@",self.shelvesTime];
                return YES;
            }
                break;
                
            default:
                break;
        }
        return YES;
    }else{
        switch (self.goodStatus) {
            case -205:
            {
                AlertInVC(@"商品已下架")
                //商品下架，关闭加入购物车，和立即购买按钮
            }
                break;
            case -206:
            {
                self.shelvesLabel.frame = CGRectMake(0, screenH - bottomBtnHeight, screenW, bottomBtnHeight);
                self.shelvesLabel.text = [NSString stringWithFormat:@"预售时间：%@",self.shelvesTime];
                return YES;
                
            }
                break;
                
            default:
                break;
        }
        
        return NO;
        
    }
}



#pragma 立即购买
- (void)buy{
    BOOL islogin =[UserInfo shareUserInfo].isLogin;
    if ([self judgeGoodsStatusDecideIsBuy]) {
        if (islogin) {
            [self presentSpecViewWithButton:self.quickBuy];
        }else{
            LoginNavVC *login = [[LoginNavVC alloc] initLoginNavVC];
            [[KeyVC shareKeyVC] presentViewController:login animated:YES completion:nil];
        }
    }
    
    
    
    
    }


/** 判断地址是否为空 */
-(void)gotAddressSuccess:(void(^)())success failure:(void(^)())failure{
    [[UserInfo shareUserInfo] gotAddressSuccess:^(ResponseObject *responseObject) {
        LOG(@"_%@_%d_%@",[self class] , __LINE__,responseObject.data);
        if (responseObject.data && [responseObject.data isKindOfClass:[NSArray class]]) {
            if ([responseObject.data count]>0) {
                //正常弹出确认订单
                
                success();
            }else{
                //弹出添加地址
                [self openBtn];
                [self noticeAddAddress];
            }
            
        }else{
            //弹出添加地址
            [self openBtn];
            [self noticeAddAddress];
        }
        
        
    } failure:^(NSError *error) {
        
        LOG(@"_%@_%d_%@",[self class] , __LINE__,error);
    }];
    
    
}
-(void)noticeAddAddress
{
    UIAlertController * alertVC = [UIAlertController alertControllerWithTitle:@"您还没有添加收货地址\n请先添加收货地址" message:@"" preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction * sure = [UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        //弹出添加地址控制器
        EditAddressVC * cv = [[EditAddressVC alloc]initWithActionStyle:Adding];
        cv.delegate=self;
        [self.navigationController pushViewController:cv animated:YES];
        
    }];
    UIAlertAction * cancle = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
        
    }];
    [alertVC addAction:sure];
    [alertVC addAction:cancle];
    [self presentViewController:alertVC animated:YES completion:nil];
}


#pragma mark -- 跳转到购物车页面
- (void)toShopCar{
    
    BaseModel *baseModel = [[BaseModel alloc] init];
    baseModel.judge = YES;
    baseModel.actionKey = @"ShopCarVC";
    [[SkipManager shareSkipManager] skipByVC:self withActionModel:baseModel];
    
    
    LOG(@"%@,%d,%@",[self class], __LINE__,@"购物车")
}

#pragma mark -- 跳转到指定的页面
- (void)HGMoreViewActionToTatargWithIndexPath:(NSIndexPath *)indexPath{
    LOG(@"%@,%d,%@",[self class], __LINE__,indexPath)
    switch (indexPath.row) {
        case 0:
        {
            [self.navigationController popToRootViewControllerAnimated:NO];
            [[KeyVC shareKeyVC] skipToTabbarItemWithIndex:0];
        }
            break;
        case 1:
        {
            BaseModel *baseModel = [[BaseModel alloc] init];
            baseModel.actionKey = @"HSearchVC";
            
            [[SkipManager shareSkipManager] skipByVC:self withActionModel:baseModel];
            
            
        }
            break;
        case 2:
        {
            if ([UserInfo shareUserInfo].isLogin) {
                BaseModel *baseModel = [[BaseModel alloc] init];
                baseModel.actionKey = @"FriendListVC";
//                XMPPJID *xm = [XMPPJID jidWithUser:self.sellerUser domain:chatDomain resource:@"ios"];
//                baseModel.keyParamete = @{@"paramete":xm};
                [[SkipManager shareSkipManager] skipByVC:self withActionModel:baseModel];
            }else{
                LoginNavVC *login = [[LoginNavVC alloc] initLoginNavVC];
                
                [[KeyVC shareKeyVC] presentViewController:login animated:YES completion:nil];
            }
        }
            break;
        case 3:
        {
            if ([self judgeGoodsStatusDecideIsBuy]) {
                BOOL isLogin = [[UserInfo shareUserInfo] isLogin];
                if (isLogin) {
                    [[UserInfo shareUserInfo] judgeGoodsIsCollectionWithGoodsID:self.goods_id success:^(ResponseObject *response) {
                        //商品被收藏状态是<0.
                        if (response.status < 0) {
                            AlertInVC(@"商品已收藏，请勿重复收藏")
                        }else{
                            [self addGoodsSuccess:^{
                                
                            } failure:^{
                                
                            }];
                        }
                    } failure:^(NSError *error) {
                        AlertInVC(@"收藏失败，请重新操作")
                    }];
                    
                }else{
                    LoginNavVC *login = [[LoginNavVC alloc] initLoginNavVC];
                    [[KeyVC shareKeyVC] presentViewController:login animated:YES completion:nil];
                }
            }
            
        }
            break;
        default:
            break;
    }
}
/**添加商品收藏*/
- (void)addGoodsSuccess:(void(^)())success failure:(void(^)())failure{
    [[UserInfo shareUserInfo] addGoodsFavoriteWithGoods_id:self.goods_id Success:^(ResponseObject *response) {
        success();
        if (response.status > 0) {
            AlertInVC(response.msg);
            
        }else{
            AlertInVC(response.msg)
        }
        
    } failure:^(NSError *error) {
        failure();
        AlertInVC(@"收藏失败请重试")
    }];
}
/**取消商品收藏*/
- (void)deleteGoodsCollectionSuccess:(void(^)())success failure:(void(^)())failure{
    [[UserInfo shareUserInfo] deleteGoodsFavoriteWithGoodsID:[@[self.goods_id] mj_JSONString] success:^(ResponseStatus response) {
        success();
        if (response > 0) {
            AlertInVC(@"取消收藏");
            self.isCollectionGoods = NO;
        }
    } failure:^(NSError *error) {
        failure();
        self.isCollectionGoods = YES;
    }];
}
#pragma mark -- titleView的代理R方法
- (void)titleViewScrollToTarget:(id)index{
    NSIndexPath *indexPath = [NSIndexPath indexPathForItem:[index integerValue] inSection:0];
    [_topCell scrollviewToTargetIndexPath:indexPath];
}
#pragma mark -- 滑动的时候改变按钮
- (void)endScrollSelectIndex:(id)index{
    NSInteger dex = [index integerValue];
    [self.titleView configmentSelectButtonWithItem:dex];
}



- (UICollectionViewFlowLayout *)flowLayout{
    if (_flowLayout == nil) {
        UICollectionViewFlowLayout *flow = [[UICollectionViewFlowLayout alloc] init];
        _flowLayout = flow;
    }
    return _flowLayout;
}
- (UICollectionView *)col{
    if (_col == nil) {
        _col = [[UICollectionView alloc] initWithFrame:CGRectMake(0, self.startY, screenW, screenH - self.startY - bottomBtnHeight) collectionViewLayout:self.flowLayout];
        [self.view addSubview:_col];
    
        [_col registerClass:[HGoodsTopCell class] forCellWithReuseIdentifier:@"HGoodsTopCell"];
        [_col registerClass:[HGoodsBottomCell class] forCellWithReuseIdentifier:@"HGoodsBottomCell"];
        [_col setShowsVerticalScrollIndicator:NO];
        [self.flowLayout setScrollDirection:UICollectionViewScrollDirectionVertical];
        _col.delegate = self;
        _col.dataSource = self;
        _col.scrollEnabled = NO;
        _col.bounces = NO;
        
    
    }
    return _col;
}
#pragma mark -- 显示下面的view
- (void)showBottomCell:(NSNotification *)notification{
    [self.navigationBackArr removeAllObjects];
    [self.navigationBackArr addObject:[NSIndexPath indexPathForItem:0 inSection:1]];
    [self.col scrollToItemAtIndexPath:[NSIndexPath indexPathForItem:1 inSection:0] atScrollPosition:UICollectionViewScrollPositionTop animated:YES];
    self.titleView.alpha = 0;
    self.titleView.userInteractionEnabled = NO;
    self.naviTitle = @"图文详情";
    self.subTableView = (UITableView *)notification.object;

    
}
#pragma mark -- 显示上面的view
- (void)showTopCell:(NSNotification *)notification{
    [self.navigationBackArr removeAllObjects];
    [self.navigationBackArr addObject:[NSIndexPath indexPathForItem:0 inSection:0]];
    [self.col scrollToItemAtIndexPath:[NSIndexPath indexPathForItem:0 inSection:0] atScrollPosition:UICollectionViewScrollPositionTop animated:YES];
    self.naviTitle = nil;
    self.titleView.alpha = 1;
    self.titleView.userInteractionEnabled = YES;
    
    
}
#pragma mark -- 添加col
- (void)addCol{
    self.col.backgroundColor = BackgroundGray;
}

- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView{
    return 1;
}
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section{
    return 2;
}
- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath{
    if (indexPath.row == 0) {
        HGoodsTopCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"HGoodsTopCell" forIndexPath:indexPath];
        _topCell = cell;
        cell.delegate = self;
        cell.goods_id = self.goods_id;
        cell.backArr = self.navigationBackArr;
//        cell.data = self.dataArr;
        return cell;
        
    }else{
        HGoodsBottomCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"HGoodsBottomCell" forIndexPath:indexPath];
        cell.delegate = self;
        cell.goods_id = self.goods_id;
        return cell;
//        cell.data = self.goodsDetailArr;
    }
    
}
- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section{
    return 0;
}

- (CGFloat)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section{
    return 0;
}
- (UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section{
    return UIEdgeInsetsMake(0, 0, 0, 0);
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath{
    return CGSizeMake(screenW, screenH - self.startY -bottomBtnHeight);
}
- (void)viewWillDisappear:(BOOL)animated{
    [super viewWillDisappear:animated];
    //将要离开这个页面的时候清空数据库
    [[FMDBManager sharFMDBMabager] deleteAllData];
}
- (void)scrollViewDidScroll:(UIScrollView *)scrollView{

}
#pragma mark -- 点击商品跳转到商品详情页面
- (void)clickGoodsActionToTheGoodsDetailVCWith:(HGoodsBottomSubModel *)goodModel{
    [[SkipManager shareSkipManager] skipByVC:self withActionModel:goodModel];
}
#pragma mark -- 跳转到店铺详情页面
- (void)ClickActionToShopDetailWith:(HGTopSubGoodsShopModel *)shopModel{
   LOG(@"%@,%d,%@",[self class], __LINE__,shopModel.actionKey)
    shopModel.actionKey = @"HShopVC";
    [[SkipManager shareSkipManager] skipByVC:self withActionModel:shopModel];
}
#pragma mark -- 跳转到店铺全部商品页面
-(void)HGoodsTopCellActionToShopAllGoodsVCWith:(HGTopSubGoodsShopSubModel *)allGoodsModel{
    
    [[SkipManager shareSkipManager] skipByVC:self withActionModel:allGoodsModel];
}

#pragma 弹出选择规格按钮
- (void)HGoodsTopCellSelectGoodsSpecificationWith:(id)object{
    NSDictionary *dic = (NSDictionary *)object;
    self.specInfoIndexPath = dic[@"indexPath"];
    if ([self judgeGoodsStatusDecideIsBuy]) {
        
        if (self.specView) {
            
        }else{
            [self presentSpecViewWithButton:nil];
        }
    }
    
    
}
#pragma mark -- 上新
-(void)HGoodsTopCellactionToshangxin:(HGTopSubGoodsShopModel *)shopModel{
    shopModel.keyParamete = @{@"shangxin":shopModel.shop_id,@"paramete":shopModel.shop_id,@"VCName":@"HGoodsVC"};
    shopModel.actionKey = @"HAllGoodsVC";
    [[SkipManager shareSkipManager] skipByVC:self withActionModel:shopModel];
}
#pragma mark -- 跳转到和卖家聊天页面
- (void)HGoodsTopCellConsultWithSeller:(HGTopSubGoodsShopModel *)shopModel{
    if ([UserInfo shareUserInfo].isLogin) {
         XMPPJID *xm = [XMPPJID jidWithUser:self.sellerUser domain:chatDomain resource:nil];
        BaseModel *baseModel = [[BaseModel alloc] init];
        if (self.sellerUser && xm)
        baseModel.actionKey = @"ChatVC";
        baseModel.keyParamete = @{@"paramete":xm};
        [[SkipManager shareSkipManager] skipByVC:self withActionModel:baseModel];
    }else{
        LoginNavVC *login = [[LoginNavVC alloc] initLoginNavVC];
    
        [[KeyVC shareKeyVC] presentViewController:login animated:YES completion:nil];
    }
}

- (void)viewDidDisappear:(BOOL)animated{
    [super viewDidDisappear:animated];
    self.specView = nil;

}


/** 友盟的回调方法 */
-(void)didFinishGetUMSocialDataInViewController:(UMSocialResponseEntity *)response
{
    //根据`responseCode`得到发送结果,如果分享成功
    if(response.responseCode == UMSResponseCodeSuccess)
    {
        //得到分享到的平台名
        NSLog(@"share to sns name is %@",[[response.data allKeys] objectAtIndex:0]);
    }
}

- (void)HGoodsTopCellShar{
    if ([self judgeGoodsStatusDecideIsBuy]) {
        [UMSocialData defaultData].extConfig.title = self.sharGoodsName;
        NSString *url = [NSString stringWithFormat:@"https://m.zjlao.com/Shop/goods_detail/goods_id/%@.html",self.goods_id];
        [UMSocialData defaultData].extConfig.qqData.url = url;
        [UMSocialData defaultData].extConfig.wechatSessionData.url=url;
        [UMSocialData defaultData].extConfig.wechatTimelineData.url=url;
        [UMSocialData defaultData].extConfig.qzoneData.url=url;
        [UMSocialData defaultData].extConfig.sinaData.shareText =[NSString stringWithFormat:@" 我在直接捞发现了一个很棒的商品，快来看看吧。%@ @直接捞 %@",self.sharGoodsName,url];
        [UMSocialData defaultData].extConfig.wechatTimelineData.shareText = [NSString stringWithFormat:@"%@",self.sharGoodsName];
        UIImageView *sharImage = [[UIImageView alloc]init];
        [sharImage sd_setImageWithURL:[NSURL URLWithString:self.sharImageUrl] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
            UIImage *img = [image imageByScalingToSize:CGSizeMake(100, 100)];
            [UMSocialData defaultData].extConfig.sinaData.shareImage = img;
            [UMSocialData defaultData].extConfig.wechatTimelineData.shareImage =img;
            [UMSocialSnsService presentSnsIconSheetView:self
                                                 appKey:@"574e769467e58efcc2000937"
                                              shareText:[NSString stringWithFormat:@"我在直接捞发现了一个很棒的商品，快来看看吧"]
                                             shareImage:img
                                        shareToSnsNames:@[UMShareToWechatSession,UMShareToWechatTimeline,UMShareToSina,UMShareToQQ]
                                               delegate:self];
        }];
    }
    

}

- (void)HGoodsTopCellSHopSharWithShop:(HGTopSubGoodsShopModel *)shopModel{
    if ([self judgeGoodsStatusDecideIsBuy]) {
        NSString *url = [NSString stringWithFormat:@"https://m.zjlao.com/Shop/index/shop_id/%@.html",shopModel.shop_id];
        [UMSocialData defaultData].extConfig.title = self.sharShopName;
        [UMSocialData defaultData].extConfig.qqData.url = url;
        [UMSocialData defaultData].extConfig.wechatSessionData.url= url;
        [UMSocialData defaultData].extConfig.wechatTimelineData.url= url;
        [UMSocialData defaultData].extConfig.sinaData.shareText =[NSString stringWithFormat:@" 我在直接捞发现了一个很棒的店铺，快来看看吧 %@@直接捞 %@",self.sharShopName,url];
        [UMSocialData defaultData].extConfig.wechatTimelineData.shareText = [NSString stringWithFormat:@"我在直接捞发现了一个很棒的店铺：%@",self.sharShopName];
        UIImageView *sharImage = [[UIImageView alloc]init];
        [sharImage sd_setImageWithURL:[NSURL URLWithString:self.sharShopLogoURl] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
            UIImage *img = [image imageByScalingToSize:CGSizeMake(100, 100)];
            [UMSocialData defaultData].extConfig.sinaData.shareImage = img;
            [UMSocialData defaultData].extConfig.wechatTimelineData.shareImage = img;
            [UMSocialSnsService presentSnsIconSheetView:self
                                                 appKey:@"574e769467e58efcc2000937"
                                              shareText:[NSString stringWithFormat:@"我在直接捞发现了一个很棒的店铺，快来看看吧"]
                                             shareImage:img
                                        shareToSnsNames:@[UMShareToWechatSession,UMShareToWechatTimeline,UMShareToSina,UMShareToQQ]
                                               delegate:self];
            
        }];    }
    
    
    
}




#pragma mark -- 重写返回方法实现智能返回
-(void)navigationBack
{
    NSIndexPath *indexPath = [self.navigationBackArr firstObject];
    if (indexPath.item == 0 ) {
        [self.navigationController popViewControllerAnimated:YES];
    }else{
        //当前页面不是商品页的时候点击返回按钮的时候首先滚动到“商品”
        HGoodsTopCell *cell = (HGoodsTopCell *)[self.col cellForItemAtIndexPath:[NSIndexPath indexPathForItem:0 inSection:0]];
        [cell scrollviewToFirstItem];
    }
    
    
}



//商品详情页面弹出提示框“bottom页面”
- (void)presentAlertWith:(id)object{
    NSDictionary * paramete = (NSDictionary*)object ;
    UIAlertController * alert = [UIAlertController alertControllerWithTitle:paramete[@"title"] message:paramete[@"content"] preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction * actioin = [UIAlertAction actionWithTitle:paramete[@"buttonT"] style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
        
    }];
    [alert addAction:actioin];
    [self presentViewController:alert animated:YES completion:nil ];
}

/**商品详情页弹出confirm提示框*/
- (void)presentConfirmWith:(id)object{
    UIAlertController *alert = (UIAlertController *)object;
    [self presentViewController:alert animated:YES completion:nil ];

}

- (void)dealloc{
//    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"showBottomCell" object:nil];
//    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"showTopCell" object:nil];
//    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"HGTopSubGoodsCell" object:nil];
//    [[NSNotificationCenter defaultCenter] removeObserver:self name:SHOPCARDATACHANGED object:nil];
    [[NSNotificationCenter defaultCenter]removeObserver:self];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    LOG(@"_%@_%d_%@",[self class] , __LINE__,@"fuck , 内存警告");
    // Dispose of any resources that can be recreated.
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/



@end
